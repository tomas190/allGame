syntax = "proto3";

package mproto;

// =================================  SERVER 收到指令返回 200 pong 消息为1 开始 ===========
// SERVER RESP : MSG_ID 1
// 1.PONG
message PONG {
    int64 time = 1; // 当前时间戳 格式 毫秒(ms) 1567668727760
}

// SERVER RESP : MSG_ID 200
// 1.登录返回
message RespLogin {
    UserInfo userInfo = 1;
}

// SERVER RESP : MSG_ID 201
// 1.获取会话列表
message RespConversionList {
    repeated Conversion conversions = 1;
    int32 skip = 2;
}

// SERVER RESP : MSG_ID 202
// 1.获取消息列表
message RespChatMsgList {
    repeated ChatMsg chatMsg = 1;
}

// SERVER RESP : MSG_ID 203
// 1.发送方发送消息返回
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
message RespSendChatMsg {
    ChatMsg chatMsg = 3; // 发送的消息 前端发送的什么 原样返回 根据msgId 确认那条消息的成功
}

// SERVER RESP : MSG_ID 303
// 1.发送方发送消息返回
message PushSendChatMsg {
    ChatMsg chatMsg = 1; // 发送的消息 前端发送的什么 原样返回 根据msgId 确认那条消息的成功
}

// CLIENT REQ : MSG_ID 204
// 1.已读消息
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
message RespReadChatMsg {
    ChatMsg chatMsg = 1; // 返回已读的那条消息
}

// CLIENT REQ : MSG_ID 205
// 1.获取未读消息条数返回
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
message RespGetUnReadNum {
    string conversionId = 1; // 会话id
    string userId = 2;
    string toUserId = 3;
    int64 unReadNum = 4; // 未读的消息条数
    string replaceContent = 5; // 代替消息
}

// CLIENT REQ : MSG_ID 206
// 1.删除一条消息返回
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
message RespDeleteChatMsg {
    ChatMsg chatMsg = 1; // 返回已删除的那条消息
}

// CLIENT REQ : MSG_ID 207
// 1.删除一条会话返回
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
message RespDeleteConversion {
    Conversion conversion = 1; // 返回已产出的conversion
}

// CLIENT REQ : MSG_ID 208
// 1.编辑一条消息
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
message RespEditChatMsg {
    ChatMsg chatMsg = 1; // 返回已编辑的那条消息
}

// CLIENT REQ : MSG_ID 209
// 1.查找一个用户
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
// 没有用户会返回501
message RespSearchUser {
    UserInfo userInfo = 1; // 返回查询的用户信息
}

// CLIENT REQ : MSG_ID 210
// 1.查找下级用户
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
// 没有用户会返回501
message RespSearchSubUser {
    UserInfo userInfo = 1; // 返回查询的用户信息
}

// CLIENT REQ : MSG_ID 211
// 1.查找下级用户
// 发送成功时 才会返回这条指令 否则会返回错误消息 ErrMsg 501
// 没有用户会返回501
message RespGetSubUserList {
    repeated UserInfo userInfo = 1; // 返回查询的用户信息
}

// CLIENT REQ : MSG_ID 213
// 1.获取快捷回复列表
message RespGetQuickReplyList {
    repeated string content = 1;

}

// CLIENT REQ : MSG_ID 304
// 1.自动进入会话
// 玩家登陆后会推送这条消息 , 如果没有自动进入的会话 isExist = false
message PushAutoEnterConversion {
    bool isExist = 1; // 是否存在  如果为false conversion 为nil
    Conversion conversion = 2; // isExist = true 进入的会话
}

// =================================  SERVER 主动推送异常指令 500 开始 ======================

// SERVER PUSH : MSG_ID 500  // 服务器断开指令
// 1.断开连接指令
message CloseConn {
    int32 code = 1; // 断开连接code  1: 3秒之后未登录断开    2: 认证失败断开  3: 在其他地方登录
    string msg = 2; // 多语言消息code 对应中文
    int32 languageCode = 3; // 多语言消息code
}

// SERVER PUSH : MSG_ID 501  // 服务器错误指令
// 1.服务器错误指令
message ErrMsg {
    int32 msgId = 1; // 错误的指令Id 客户端发送的指令
    string msg = 2; // 多语言消息code 对应中文
    int32 languageCode = 3; // 多语言消息code
}

// ================================== data ==================================

// 1. LoginResp
message UserInfo {
    string userId = 1;
    string userNick = 2;
    string userHeadImg = 3;
    int32 userType = 4;
}

// 1.RespPullConversionList
message Conversion {
    string userId = 1; // 用户id
    string userNick = 2;
    string headImg = 3;
    int32 userType = 4;

    string toUserId = 5; // 对方用户id
    string toUserNick = 6; // 对方用户昵称
    string toUserHeadImg = 7; // 对方用户头像
    int32 toUserType = 8; // 对方用户类型 // 暂时不管

    // 1:普通消息(文字消息) 2:图片消息(文字消息) 3:充值消息
    int32 lastMsgType = 9; // 最后一条消息的消息类型

    // 1:普通消息(用户和用户之间的消息) 2:系统消息
    int32 lastMsgKind = 10; // 最后一条消息种类

    string replaceContent = 11; // 代替消息 用于展示列表中的消息类容

    int32 unReadNum = 12; // 未读条数

    string conversionId = 13; // 会话ID

    int64 createTime = 14; // 会话创建时间
    int64 uptTime = 15; // 会话更新时间

}

message ChatMsg {
    // 发送方发送消息时 把消息放在消息列表里 并在服务器返回消息发送成功钱 消息为正在发送状态
    string msgId = 1; // 消息id 前端创建 uuid保证唯一性,后台根据msgId 返回是否发送成功 已读  前端由此判断消息显示

    string userId = 2;
    string userNick = 3;
    string userHeadImg = 4;
    int32 userType = 5;

    string toUserId = 6;
    string toUserNick = 7;
    string toUserHeadImg = 8;
    int32 toUserType = 9;

    string content = 10; // 消息内容

    // 消息种类 1 用于与用户之间; 2 系统与用户之间
    int32 msgKind = 11;

    // 消息类型(1聊天消息, 2交易消息)
    int32 msgType = 12; // 消息类型

    // 消息内容类型(1文字,2 图片...)
    int32 contentType = 13; //

    int64 sendTime = 14; // 发送时间

    int64 readTime = 15; // 已读时间
    int64 EditUptTime = 16; // 最后一次更新时间
    bool isRead = 17; //是否已读

}

// 多语言
//message LanguageMsg{
//  int32 LanguageMsgCode = 1; // 消息码 对应多语言消息提示
//  string languageMsg = 2; // 中文消息
//}