syntax = "proto3";

package msg;

/************************		客户端请求		**********************/

// 用户登录
message UserLogin {
	int64  uid = 1;
	string  pwd = 2;
	string  token = 3;
	string  game_id =4;
}

// 玩家登出
message UserLogout {}

// 客户端心跳
message ClientBreath{}

// 匹配游戏
message RandomMatchReq {
	int32 level =1;
}

// 恢复场景
message RecoverGameScene {}

// 用户离开房间请求
message LeaveRoomReq {}

// 玩家抢庄
message CompeteBanker {
	int32 multiple = 1;
}

// 闲家选择倍数
message PlayerSelectBet {
	int32 multiple = 1;
}

/************************		客户端请求		**********************/



/************************		请求回应		**********************/


// 返回数据统一格式
message S2C {
	int32 code = 1;
	bytes data = 2;
}

// 房间信息,用于加载房间列表
message RoomTypeInfo {
	int32	level		= 1;
	double 	min_limit	= 2;
	double	base_money	= 3;
	string	name		= 4;
}

// 玩家基本信息
message PlayerBaseInfo {
	double	money		= 1;
	string	nick		= 2;
	string	avatar_url	= 3;
}

// 登录游戏回应
message PlayerLoginResp {
	int64	uid		= 1;
	PlayerBaseInfo player_info	= 2;
	repeated RoomTypeInfo room_type_list = 3;
}

// 离开房间回应
message LeaveRoomResp {
	int32 chair = 1;
}

// 匹配房间返回
message RandomMatchResp {
	int32 level = 1;
}

// 桌面玩家信息，其它玩家坐下时 通知
message DeskPlayer {
	int32	chair	= 1;
	PlayerBaseInfo player_info = 2;
}

// 游戏未开始桌面数据
// message GameScene4Waiting {
// 	int64	count_down	= 1;
// 	int32	my_chair	= 2;
// 	repeated DeskPlayer all_players = 3;
// }

// 游戏中的玩家数据
message PlayerInfoWhenGaming {
	int32	chair		= 1;
	sint32	multiple	= 2;	// 抢庄、下注	倍数, -1 表示还没有下注
	int32	card_type	= 3;
	bool	is_in_game	= 4;
	bytes	cards		= 5;
	double	change		= 6;
	PlayerBaseInfo	player_info	= 7;
}
// 正在抢庄/选择筹码 的桌面数据
message GameScene4Gaming {
	int64	count_down		= 1;
	int32	my_chair		= 2;
	int32	banker_chair	= 3;	// 庄家椅子号，如果处于 等待开始/正在抢庄 阶段，则应忽略 banker_chair
	int32	curr_status		= 4;	// 当前游戏阶段，如果处于 等待开始/正在抢庄 阶段，则应忽略 banker_chair
	double	base_point		= 5;	// 底分
	repeated PlayerInfoWhenGaming all_players = 6;
}

// // 结算时的玩家数据
// message PlayerInfoWhenSettle {
// 	double	change	= 1;
// 	GameScene4Gaming	result_info	= 2;
// }

// 抢庄、下注返回
message CompeteBankerResp {
	int32	chair		= 1;
	int32	multiple	= 2;
	int64	count_down	= 3;	// 剩余的倒计时，为 0 时表示需要所以玩家已进行了操作，需要进入下一阶段了; 若用 -1 表示，请用其它类型
}

/************************		请求回应		**********************/



/************************		游戏通知		**********************/


// 多用户登录踢出游戏通知
message KickedPlayer {
	int64   server_time = 1;
	string  msg        = 2;
}

// 其它玩家加入房间通知
message NotifyPlayerEnterRoom {
	int32   chair   = 1;
	double  money   = 2;
	string  nick    = 3;
	string  avator  = 4;
}

// 用户断线通知
message NotifyPlayerNetCut {
	int32 chair = 1;
}

// 通知倒计时信息
message NotifyCountDown {
    int32 count_down = 1;
}

// 游戏开始,发牌的玩家，自己的牌
message SendCardsInfo {
    bytes my_cards   = 1;
    repeated int32 send_cards_player = 2;
}

// 每个玩家的牌信息
message PlayerResultInfo {
    int32   chair           = 1;
    int32   card_type       = 2;
    bytes   cards           = 3;
    double  money_change    = 4;
    double  residue_money   = 5;
}
// 展示所有人的牌，金币的变化，剩余的金币
message AllPlayersResults {
    repeated PlayerResultInfo results = 1;
}

// 抢庄超时通知, 下注超时通知
message OperationOutTimeNotify {
    int32   multiple    = 1;    // 未抢庄的玩家执行的默认操作
    repeated int32  chair_set = 2;  // 未抢庄的人
}

// 抢庄结果通知
message CompeteResult {
    int32   multiple        = 1;
    int32   banker_chair    = 2;        // 庄家
    repeated int32 compete_list = 3;    // 参与随机的抢庄列表
}

message TestCardsType {
  	bytes cards = 1;
	int64 uid  = 2;
}

/************************		游戏通知		**********************/






















